// This file is @generated by prost-build.
/// Evidence package containing event data to be notarized
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvidencePackage {
    /// Evidence package specification version
    #[prost(string, tag = "1")]
    pub spec_version: ::prost::alloc::string::String,
    /// UTC timestamp when the evidence was created
    #[prost(message, optional, tag = "2")]
    pub timestamp_utc: ::core::option::Option<::prost_types::Timestamp>,
    /// Type of event being notarized (e.g., "model.deployment.completed")
    #[prost(string, tag = "3")]
    pub event_type: ::prost::alloc::string::String,
    /// Actor who initiated the event
    #[prost(message, optional, tag = "4")]
    pub actor: ::core::option::Option<Actor>,
    /// Digital artifacts associated with the event
    #[prost(message, repeated, tag = "5")]
    pub artifacts: ::prost::alloc::vec::Vec<Artifact>,
    /// Additional metadata about the event
    #[prost(message, optional, tag = "6")]
    pub metadata: ::core::option::Option<::prost_types::Struct>,
}
/// Actor information (user, service, or system that initiated an event)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Actor {
    /// Type of actor (human_user, service, workflow, etc.)
    #[prost(string, tag = "1")]
    pub actor_type: ::prost::alloc::string::String,
    /// Unique identifier for the actor
    #[prost(string, tag = "2")]
    pub id: ::prost::alloc::string::String,
    /// Authentication provider used (optional)
    #[prost(string, tag = "3")]
    pub auth_provider: ::prost::alloc::string::String,
}
/// Digital artifact associated with an event
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Artifact {
    /// Human-readable name of the artifact
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// URI where the artifact can be accessed (optional)
    #[prost(string, tag = "2")]
    pub uri: ::prost::alloc::string::String,
    /// SHA256 hash of the artifact for integrity verification
    #[prost(string, tag = "3")]
    pub hash_sha256: ::prost::alloc::string::String,
}
/// Cryptographic receipt proving notarization
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotarizationReceipt {
    /// SHA256 hash of the evidence package that was signed
    #[prost(string, tag = "1")]
    pub evidence_package_hash: ::prost::alloc::string::String,
    /// Unique ID for this entry in the Rekor transparency log
    #[prost(string, tag = "2")]
    pub rekor_log_id: ::prost::alloc::string::String,
    /// URL of the Rekor server where this was logged
    #[prost(string, tag = "3")]
    pub rekor_server_url: ::prost::alloc::string::String,
    /// Base64-encoded signature from the Notary Service
    #[prost(string, tag = "4")]
    pub signature_b64: ::prost::alloc::string::String,
    /// Base64-encoded public key used for signing
    #[prost(string, tag = "5")]
    pub public_key_b64: ::prost::alloc::string::String,
    /// Integration timestamp from Rekor
    #[prost(int64, tag = "6")]
    pub integrated_time: i64,
    /// Log index in Rekor
    #[prost(int64, tag = "7")]
    pub log_index: i64,
}
/// Sign evidence request
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignEvidenceRequest {
    /// Evidence package to be signed
    #[prost(message, optional, tag = "1")]
    pub evidence_package: ::core::option::Option<EvidencePackage>,
}
/// Sign evidence response
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignEvidenceResponse {
    /// Workflow ID for tracking the signing process
    #[prost(string, tag = "1")]
    pub workflow_id: ::prost::alloc::string::String,
    /// Notarization receipt (if completed synchronously)
    #[prost(message, optional, tag = "2")]
    pub receipt: ::core::option::Option<NotarizationReceipt>,
    /// Current status of the signing process
    #[prost(enumeration = "WorkflowStatus", tag = "3")]
    pub status: i32,
}
/// Sign evidence with approval request
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignEvidenceWithApprovalRequest {
    /// Evidence package to be signed
    #[prost(message, optional, tag = "1")]
    pub evidence_package: ::core::option::Option<EvidencePackage>,
    /// List of required approvers (email addresses or user IDs)
    #[prost(string, repeated, tag = "2")]
    pub approvers: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Sign evidence with approval response
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignEvidenceWithApprovalResponse {
    /// Workflow ID for tracking the approval process
    #[prost(string, tag = "1")]
    pub workflow_id: ::prost::alloc::string::String,
    /// Current status of the approval process
    #[prost(enumeration = "WorkflowStatus", tag = "2")]
    pub status: i32,
    /// Status of each required approval
    #[prost(message, repeated, tag = "3")]
    pub approval_statuses: ::prost::alloc::vec::Vec<ApprovalStatus>,
}
/// Approval status for individual approver
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApprovalStatus {
    /// Email or ID of the approver
    #[prost(string, tag = "1")]
    pub approver: ::prost::alloc::string::String,
    /// Current approval status
    #[prost(enumeration = "ApprovalState", tag = "2")]
    pub status: i32,
    /// Timestamp of the approval action
    #[prost(message, optional, tag = "3")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// Optional comment from the approver
    #[prost(string, tag = "4")]
    pub comment: ::prost::alloc::string::String,
}
/// Batch sign request
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignEvidenceBatchRequest {
    /// Multiple evidence packages to be signed in batch
    #[prost(message, repeated, tag = "1")]
    pub evidence_packages: ::prost::alloc::vec::Vec<EvidencePackage>,
}
/// Batch sign response
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignEvidenceBatchResponse {
    /// Batch workflow ID for tracking the entire batch
    #[prost(string, tag = "1")]
    pub batch_workflow_id: ::prost::alloc::string::String,
    /// Individual results for each evidence package
    #[prost(message, repeated, tag = "2")]
    pub results: ::prost::alloc::vec::Vec<SignEvidenceResponse>,
    /// Overall batch status
    #[prost(enumeration = "WorkflowStatus", tag = "3")]
    pub status: i32,
}
/// Get workflow status request
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWorkflowStatusRequest {
    /// Workflow ID to check
    #[prost(string, tag = "1")]
    pub workflow_id: ::prost::alloc::string::String,
}
/// Get workflow status response
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWorkflowStatusResponse {
    /// Workflow ID
    #[prost(string, tag = "1")]
    pub workflow_id: ::prost::alloc::string::String,
    /// Current workflow status
    #[prost(enumeration = "WorkflowStatus", tag = "2")]
    pub status: i32,
    /// When the workflow was created
    #[prost(message, optional, tag = "3")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    /// When the workflow completed (if applicable)
    #[prost(message, optional, tag = "4")]
    pub completed_at: ::core::option::Option<::prost_types::Timestamp>,
    /// Error message (if failed)
    #[prost(string, tag = "5")]
    pub error_message: ::prost::alloc::string::String,
    /// Workflow result data
    #[prost(message, optional, tag = "6")]
    pub result: ::core::option::Option<::prost_types::Struct>,
}
/// Validate evidence request
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidateEvidenceRequest {
    /// Evidence package to validate
    #[prost(message, optional, tag = "1")]
    pub evidence_package: ::core::option::Option<EvidencePackage>,
    /// Signature to validate against
    #[prost(string, tag = "2")]
    pub signature: ::prost::alloc::string::String,
}
/// Validate evidence response
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidateEvidenceResponse {
    /// Whether the evidence package is valid
    #[prost(bool, tag = "1")]
    pub is_valid: bool,
    /// Validation error message (if invalid)
    #[prost(string, tag = "2")]
    pub validation_error: ::prost::alloc::string::String,
    /// Detailed validation results
    #[prost(message, optional, tag = "3")]
    pub validation_result: ::core::option::Option<ValidationResult>,
}
/// Detailed validation results
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidationResult {
    /// Whether the cryptographic signature is valid
    #[prost(bool, tag = "1")]
    pub signature_valid: bool,
    /// Whether the evidence package hash is valid
    #[prost(bool, tag = "2")]
    pub evidence_hash_valid: bool,
    /// Whether the Rekor transparency log entry is valid
    #[prost(bool, tag = "3")]
    pub rekor_entry_valid: bool,
    /// Whether the timestamp is valid
    #[prost(bool, tag = "4")]
    pub timestamp_valid: bool,
    /// Any validation warnings
    #[prost(string, repeated, tag = "5")]
    pub warnings: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Get notarization receipt request
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNotarizationReceiptRequest {
    /// Workflow ID
    #[prost(string, tag = "1")]
    pub workflow_id: ::prost::alloc::string::String,
}
/// Get notarization receipt response
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNotarizationReceiptResponse {
    /// Notarization receipt (if found)
    #[prost(message, optional, tag = "1")]
    pub receipt: ::core::option::Option<NotarizationReceipt>,
    /// Whether the receipt was found
    #[prost(bool, tag = "2")]
    pub found: bool,
}
/// List workflows request
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWorkflowsRequest {
    /// Maximum number of workflows to return
    #[prost(int32, tag = "1")]
    pub page_size: i32,
    /// Pagination token from previous request
    #[prost(string, tag = "2")]
    pub page_token: ::prost::alloc::string::String,
    /// Filter by workflow status (optional)
    #[prost(enumeration = "WorkflowStatus", tag = "3")]
    pub status_filter: i32,
    /// Filter by start time (optional)
    #[prost(message, optional, tag = "4")]
    pub start_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Filter by end time (optional)
    #[prost(message, optional, tag = "5")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// List workflows response
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWorkflowsResponse {
    /// List of workflow summaries
    #[prost(message, repeated, tag = "1")]
    pub workflows: ::prost::alloc::vec::Vec<WorkflowSummary>,
    /// Token for the next page of results
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Total number of workflows matching the criteria
    #[prost(int32, tag = "3")]
    pub total_count: i32,
}
/// Workflow summary information
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WorkflowSummary {
    /// Workflow ID
    #[prost(string, tag = "1")]
    pub workflow_id: ::prost::alloc::string::String,
    /// Type of workflow (simple_signing, approval_signing, batch_signing)
    #[prost(string, tag = "2")]
    pub workflow_type: ::prost::alloc::string::String,
    /// Current workflow status
    #[prost(enumeration = "WorkflowStatus", tag = "3")]
    pub status: i32,
    /// When the workflow was created
    #[prost(message, optional, tag = "4")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    /// When the workflow completed (if applicable)
    #[prost(message, optional, tag = "5")]
    pub completed_at: ::core::option::Option<::prost_types::Timestamp>,
    /// Type of event being processed
    #[prost(string, tag = "6")]
    pub event_type: ::prost::alloc::string::String,
    /// ID of the actor who initiated the workflow
    #[prost(string, tag = "7")]
    pub actor_id: ::prost::alloc::string::String,
}
/// Health check request (empty message)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HealthRequest {}
/// Health check response
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthResponse {
    /// Service status (healthy, unhealthy, degraded)
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    /// Service version
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
    /// Uptime in seconds
    #[prost(int64, tag = "3")]
    pub uptime_seconds: i64,
    /// Status of dependencies
    #[prost(message, repeated, tag = "4")]
    pub dependencies: ::prost::alloc::vec::Vec<DependencyStatus>,
}
/// Dependency status information
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DependencyStatus {
    /// Dependency name (vault, rekor, temporal)
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Whether the dependency is healthy
    #[prost(bool, tag = "2")]
    pub healthy: bool,
    /// Response time in milliseconds (if available)
    #[prost(int64, tag = "3")]
    pub response_time_ms: i64,
    /// Error message (if unhealthy)
    #[prost(string, tag = "4")]
    pub error: ::prost::alloc::string::String,
}
/// Approval state enumeration
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ApprovalState {
    Unspecified = 0,
    Pending = 1,
    Approved = 2,
    Rejected = 3,
}
impl ApprovalState {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "APPROVAL_STATE_UNSPECIFIED",
            Self::Pending => "APPROVAL_STATE_PENDING",
            Self::Approved => "APPROVAL_STATE_APPROVED",
            Self::Rejected => "APPROVAL_STATE_REJECTED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "APPROVAL_STATE_UNSPECIFIED" => Some(Self::Unspecified),
            "APPROVAL_STATE_PENDING" => Some(Self::Pending),
            "APPROVAL_STATE_APPROVED" => Some(Self::Approved),
            "APPROVAL_STATE_REJECTED" => Some(Self::Rejected),
            _ => None,
        }
    }
}
/// Workflow status enumeration
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum WorkflowStatus {
    Unspecified = 0,
    Pending = 1,
    Running = 2,
    Completed = 3,
    Failed = 4,
    Cancelled = 5,
}
impl WorkflowStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "WORKFLOW_STATUS_UNSPECIFIED",
            Self::Pending => "WORKFLOW_STATUS_PENDING",
            Self::Running => "WORKFLOW_STATUS_RUNNING",
            Self::Completed => "WORKFLOW_STATUS_COMPLETED",
            Self::Failed => "WORKFLOW_STATUS_FAILED",
            Self::Cancelled => "WORKFLOW_STATUS_CANCELLED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WORKFLOW_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "WORKFLOW_STATUS_PENDING" => Some(Self::Pending),
            "WORKFLOW_STATUS_RUNNING" => Some(Self::Running),
            "WORKFLOW_STATUS_COMPLETED" => Some(Self::Completed),
            "WORKFLOW_STATUS_FAILED" => Some(Self::Failed),
            "WORKFLOW_STATUS_CANCELLED" => Some(Self::Cancelled),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod notary_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// AFDP Notary Service
    /// Provides cryptographic notarization services for AI deployment pipeline events
    #[derive(Debug, Clone)]
    pub struct NotaryServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl NotaryServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> NotaryServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> NotaryServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            NotaryServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Sign evidence package using simple workflow
        pub async fn sign_evidence(
            &mut self,
            request: impl tonic::IntoRequest<super::SignEvidenceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SignEvidenceResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/afdp.notary.v1.NotaryService/SignEvidence",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("afdp.notary.v1.NotaryService", "SignEvidence"));
            self.inner.unary(req, path, codec).await
        }
        /// Sign evidence with approval workflow (requires multiple approvers)
        pub async fn sign_evidence_with_approval(
            &mut self,
            request: impl tonic::IntoRequest<super::SignEvidenceWithApprovalRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SignEvidenceWithApprovalResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/afdp.notary.v1.NotaryService/SignEvidenceWithApproval",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "afdp.notary.v1.NotaryService",
                        "SignEvidenceWithApproval",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Batch sign multiple evidence packages for efficiency
        pub async fn sign_evidence_batch(
            &mut self,
            request: impl tonic::IntoRequest<super::SignEvidenceBatchRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SignEvidenceBatchResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/afdp.notary.v1.NotaryService/SignEvidenceBatch",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("afdp.notary.v1.NotaryService", "SignEvidenceBatch"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Get the status of a running workflow
        pub async fn get_workflow_status(
            &mut self,
            request: impl tonic::IntoRequest<super::GetWorkflowStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetWorkflowStatusResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/afdp.notary.v1.NotaryService/GetWorkflowStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("afdp.notary.v1.NotaryService", "GetWorkflowStatus"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Validate a signed evidence package
        pub async fn validate_evidence(
            &mut self,
            request: impl tonic::IntoRequest<super::ValidateEvidenceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ValidateEvidenceResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/afdp.notary.v1.NotaryService/ValidateEvidence",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("afdp.notary.v1.NotaryService", "ValidateEvidence"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Get notarization receipt for a completed workflow
        pub async fn get_notarization_receipt(
            &mut self,
            request: impl tonic::IntoRequest<super::GetNotarizationReceiptRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetNotarizationReceiptResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/afdp.notary.v1.NotaryService/GetNotarizationReceipt",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "afdp.notary.v1.NotaryService",
                        "GetNotarizationReceipt",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// List workflows with optional filtering
        pub async fn list_workflows(
            &mut self,
            request: impl tonic::IntoRequest<super::ListWorkflowsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListWorkflowsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/afdp.notary.v1.NotaryService/ListWorkflows",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("afdp.notary.v1.NotaryService", "ListWorkflows"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Service health check
        pub async fn health_check(
            &mut self,
            request: impl tonic::IntoRequest<super::HealthRequest>,
        ) -> std::result::Result<tonic::Response<super::HealthResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/afdp.notary.v1.NotaryService/HealthCheck",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("afdp.notary.v1.NotaryService", "HealthCheck"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod notary_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with NotaryServiceServer.
    #[async_trait]
    pub trait NotaryService: std::marker::Send + std::marker::Sync + 'static {
        /// Sign evidence package using simple workflow
        async fn sign_evidence(
            &self,
            request: tonic::Request<super::SignEvidenceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SignEvidenceResponse>,
            tonic::Status,
        >;
        /// Sign evidence with approval workflow (requires multiple approvers)
        async fn sign_evidence_with_approval(
            &self,
            request: tonic::Request<super::SignEvidenceWithApprovalRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SignEvidenceWithApprovalResponse>,
            tonic::Status,
        >;
        /// Batch sign multiple evidence packages for efficiency
        async fn sign_evidence_batch(
            &self,
            request: tonic::Request<super::SignEvidenceBatchRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SignEvidenceBatchResponse>,
            tonic::Status,
        >;
        /// Get the status of a running workflow
        async fn get_workflow_status(
            &self,
            request: tonic::Request<super::GetWorkflowStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetWorkflowStatusResponse>,
            tonic::Status,
        >;
        /// Validate a signed evidence package
        async fn validate_evidence(
            &self,
            request: tonic::Request<super::ValidateEvidenceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ValidateEvidenceResponse>,
            tonic::Status,
        >;
        /// Get notarization receipt for a completed workflow
        async fn get_notarization_receipt(
            &self,
            request: tonic::Request<super::GetNotarizationReceiptRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetNotarizationReceiptResponse>,
            tonic::Status,
        >;
        /// List workflows with optional filtering
        async fn list_workflows(
            &self,
            request: tonic::Request<super::ListWorkflowsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListWorkflowsResponse>,
            tonic::Status,
        >;
        /// Service health check
        async fn health_check(
            &self,
            request: tonic::Request<super::HealthRequest>,
        ) -> std::result::Result<tonic::Response<super::HealthResponse>, tonic::Status>;
    }
    /// AFDP Notary Service
    /// Provides cryptographic notarization services for AI deployment pipeline events
    #[derive(Debug)]
    pub struct NotaryServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> NotaryServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for NotaryServiceServer<T>
    where
        T: NotaryService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/afdp.notary.v1.NotaryService/SignEvidence" => {
                    #[allow(non_camel_case_types)]
                    struct SignEvidenceSvc<T: NotaryService>(pub Arc<T>);
                    impl<
                        T: NotaryService,
                    > tonic::server::UnaryService<super::SignEvidenceRequest>
                    for SignEvidenceSvc<T> {
                        type Response = super::SignEvidenceResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SignEvidenceRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NotaryService>::sign_evidence(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SignEvidenceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/afdp.notary.v1.NotaryService/SignEvidenceWithApproval" => {
                    #[allow(non_camel_case_types)]
                    struct SignEvidenceWithApprovalSvc<T: NotaryService>(pub Arc<T>);
                    impl<
                        T: NotaryService,
                    > tonic::server::UnaryService<super::SignEvidenceWithApprovalRequest>
                    for SignEvidenceWithApprovalSvc<T> {
                        type Response = super::SignEvidenceWithApprovalResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::SignEvidenceWithApprovalRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NotaryService>::sign_evidence_with_approval(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SignEvidenceWithApprovalSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/afdp.notary.v1.NotaryService/SignEvidenceBatch" => {
                    #[allow(non_camel_case_types)]
                    struct SignEvidenceBatchSvc<T: NotaryService>(pub Arc<T>);
                    impl<
                        T: NotaryService,
                    > tonic::server::UnaryService<super::SignEvidenceBatchRequest>
                    for SignEvidenceBatchSvc<T> {
                        type Response = super::SignEvidenceBatchResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SignEvidenceBatchRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NotaryService>::sign_evidence_batch(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SignEvidenceBatchSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/afdp.notary.v1.NotaryService/GetWorkflowStatus" => {
                    #[allow(non_camel_case_types)]
                    struct GetWorkflowStatusSvc<T: NotaryService>(pub Arc<T>);
                    impl<
                        T: NotaryService,
                    > tonic::server::UnaryService<super::GetWorkflowStatusRequest>
                    for GetWorkflowStatusSvc<T> {
                        type Response = super::GetWorkflowStatusResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetWorkflowStatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NotaryService>::get_workflow_status(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetWorkflowStatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/afdp.notary.v1.NotaryService/ValidateEvidence" => {
                    #[allow(non_camel_case_types)]
                    struct ValidateEvidenceSvc<T: NotaryService>(pub Arc<T>);
                    impl<
                        T: NotaryService,
                    > tonic::server::UnaryService<super::ValidateEvidenceRequest>
                    for ValidateEvidenceSvc<T> {
                        type Response = super::ValidateEvidenceResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ValidateEvidenceRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NotaryService>::validate_evidence(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ValidateEvidenceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/afdp.notary.v1.NotaryService/GetNotarizationReceipt" => {
                    #[allow(non_camel_case_types)]
                    struct GetNotarizationReceiptSvc<T: NotaryService>(pub Arc<T>);
                    impl<
                        T: NotaryService,
                    > tonic::server::UnaryService<super::GetNotarizationReceiptRequest>
                    for GetNotarizationReceiptSvc<T> {
                        type Response = super::GetNotarizationReceiptResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetNotarizationReceiptRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NotaryService>::get_notarization_receipt(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetNotarizationReceiptSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/afdp.notary.v1.NotaryService/ListWorkflows" => {
                    #[allow(non_camel_case_types)]
                    struct ListWorkflowsSvc<T: NotaryService>(pub Arc<T>);
                    impl<
                        T: NotaryService,
                    > tonic::server::UnaryService<super::ListWorkflowsRequest>
                    for ListWorkflowsSvc<T> {
                        type Response = super::ListWorkflowsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListWorkflowsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NotaryService>::list_workflows(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListWorkflowsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/afdp.notary.v1.NotaryService/HealthCheck" => {
                    #[allow(non_camel_case_types)]
                    struct HealthCheckSvc<T: NotaryService>(pub Arc<T>);
                    impl<
                        T: NotaryService,
                    > tonic::server::UnaryService<super::HealthRequest>
                    for HealthCheckSvc<T> {
                        type Response = super::HealthResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HealthRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NotaryService>::health_check(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = HealthCheckSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for NotaryServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "afdp.notary.v1.NotaryService";
    impl<T> tonic::server::NamedService for NotaryServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
