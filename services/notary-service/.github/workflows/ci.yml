name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - 1.70.0  # MSRV
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Run doc tests
      run: cargo test --doc

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      vault:
        image: vault:latest
        env:
          VAULT_DEV_ROOT_TOKEN_ID: root
          VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
          VAULT_API_ADDR: http://0.0.0.0:8200
        ports:
          - 8200:8200
        options: --cap-add=IPC_LOCK
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Wait for Vault
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:8200/v1/sys/health; do sleep 1; done'
    
    - name: Configure Vault
      env:
        VAULT_ADDR: http://localhost:8200
        VAULT_TOKEN: root
      run: |
        # Install vault CLI
        curl -fsSL https://releases.hashicorp.com/vault/1.15.2/vault_1.15.2_linux_amd64.zip -o vault.zip
        unzip vault.zip
        sudo mv vault /usr/local/bin/
        
        # Configure transit secrets engine
        vault secrets enable transit
        vault write -f transit/keys/afdp-notary-key
    
    - name: Run integration tests
      env:
        VAULT_ADDR: http://localhost:8200
        VAULT_TOKEN: root
      run: cargo test --features integration-tests

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo-audit
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-audit
        key: ${{ runner.os }}-cargo-audit-v0.20
    
    - name: Install cargo-audit
      run: |
        if ! command -v cargo-audit &> /dev/null; then
          cargo install cargo-audit --version 0.20
        fi
    
    - name: Run security audit
      run: cargo audit --deny warnings
    
    - name: Cache cargo-deny
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-deny
        key: ${{ runner.os }}-cargo-deny-v0.14
    
    - name: Install cargo-deny
      run: |
        if ! command -v cargo-deny &> /dev/null; then
          cargo install cargo-deny --version 0.14
        fi
    
    - name: Run cargo deny check
      run: cargo deny check

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin
    
    - name: Generate coverage report
      run: |
        cargo tarpaulin \
          --verbose \
          --all-features \
          --workspace \
          --timeout 120 \
          --out xml \
          --exclude-files examples/* \
          --exclude-files tests/*
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./cobertura.xml
        fail_ci_if_error: false

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-build-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build library
      run: cargo build --verbose
    
    - name: Build examples
      run: cargo build --examples --verbose
    
    - name: Build server binary
      run: cargo build --bin afdp-notary-server --verbose

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build documentation
      run: cargo doc --no-deps --all-features
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc